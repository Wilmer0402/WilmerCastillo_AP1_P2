@page "/Combos/Edit/{CombosId:int}"
@rendermode InteractiveServer
@inject ProductosService productosService
@inject CombosServices combosServices
@inject NavigationManager navigation
@inject ToastService Toast

<PageTitle>Editar un Combo</PageTitle>
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="@Combo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Editar Combo</h5>
            </div>

            <div class="card-body">
                @* ID del Combo *@
                <div class="mb-3">
                    <label for="CombosId" class="form-label"><strong>Combo Id</strong></label>
                    <InputNumber class="form-control" @bind-Value="Combo.CombosId" readonly></InputNumber>
                </div>

                @* Fecha del Combo *@
                <div class="mb-3">
                    <label for="Fecha" class="form-label"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Combo.Fecha"></InputDate>
                </div>

                @* Descripción *@
                <div class="mb-3">
                    <label for="Descripcion" class="form-label"><strong>Descripción</strong></label>
                    <InputText class="form-control" @bind-Value="Combo.Descripcion"></InputText>
                    <ValidationMessage For="(() => Combo.Descripcion)"></ValidationMessage>
                </div>

                @* Precio Total *@
                <div class="mb-3">
                    <label for="Precio" class="form-label"><strong>Precio Total</strong></label>
                    <InputNumber class="form-control" @bind-Value="Combo.Precio" readonly></InputNumber>
                </div>

                @* Vendido *@
                <div class="mb-3">
                    <label for="Vendido" class="form-label"><strong>¿Vendido?</strong></label>
                    <InputCheckbox class="form-check-input" @bind-Value="Combo.Vendido" />
                </div>

                @* Detalles del Combo *@
                <div class="border border-success p-3 mt-3">
                    <h4>Detalles del Combo</h4>
                    @if (!string.IsNullOrEmpty(DetalleMensaje))
                    {
                        <div class="alert alert-danger" role="alert">
                            @DetalleMensaje
                        </div>
                    }
                    <div class="row">
                        <div class="col-auto input-group align-items-center">
                            <SeleccionArticulo Productos="ArticulosDisponibles"
                                               Cantidad="NuevoDetalle.Cantidad"
                                               Costo="NuevoDetalle.Costo"
                                               ProductosId="NuevoDetalle.ProductosId"
                                               productoSeleccionado="AgregarDetalle" />
                        </div>
                    </div>

                    <div>
                        <table class="table table-light">
                            <thead class="table-striped">
                                <tr class="text-center">
                                    <th>Producto</th>
                                    <th>Cantidad</th>
                                    <th>Costo</th>
                                    <th>Remover</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var Detalle in Combo.CombosDetalle)
                                {
                                    <tr class="text-center">
                                        <td>@Detalle.ProductosId</td> 
                                        <td>@Detalle.Cantidad</td>
                                        <td>@Detalle.Costo</td>
                                        <td>
                                            <button type="button" @onclick="() => RemoverDetalle(Detalle)" class="btn btn-outline-danger bi bi-trash"> Remover</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <a href="/Combos/Index" class="btn btn-secondary text-white bi bi-arrow-90deg-left"> Volver</a>
                <button type="submit" class="btn btn-success bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CombosId { get; set; }
    public Combo1 Combo { get; set; } = new Combo1();
    public ComboDetalles NuevoDetalle { get; set; } = new ComboDetalles();
    public List<Product> ArticulosDisponibles { get; set; } = new List<Product>();

    public string DetalleMensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Combo = await combosServices.BuscarConDetalles(CombosId);  
        ArticulosDisponibles = await productosService.Listar(a => a.ProductosId > 0); 
    }

    private void CalcularMontoTotal()
    {
        Combo.Precio = Combo.CombosDetalle.Sum(d => d.Costo * d.Cantidad); 
    }

    private async Task AgregarDetalle((Product product, int Cantidad) selection)

    {
        Toast.Notify(new(ToastType.Success, "Se ha Agregado un Detalle"));
        var productoExistente = Combo.CombosDetalle
            .FirstOrDefault(d => d.ProductosId == selection.product.ProductosId);

        if (productoExistente != null)
        {
            productoExistente.Cantidad += selection.Cantidad;
            productoExistente.Costo = productoExistente.Costo * productoExistente.Cantidad;
        }
        else
        {
            var ComboDetalles = new ComboDetalles
                {
                    ProductosId = selection.product.ProductosId,
                    Cantidad = selection.Cantidad,
                    Costo = selection.product.Precio * selection.Cantidad,
                };
            Combo.CombosDetalle.Add(ComboDetalles);
        }


        CalcularMontoTotal();
        await Task.CompletedTask;
    }

    public async Task Guardar()
    {
        DetalleMensaje = string.Empty;

        if (string.IsNullOrWhiteSpace(Combo.Descripcion))
        {
            DetalleMensaje = "La descripción del Combo es obligatoria.";
            return;
        }

        if (!Combo.CombosDetalle.Any())
        {
            DetalleMensaje = "Debe agregar al menos un detalle al Combo.";
            return;
        }

        await combosServices.Guardar(Combo);
        Toast.Notify(new(ToastType.Success, "Combo actualizado correctamente"));
        await Task.Delay(4000);
        navigation.NavigateTo("/Combos/Index");
    }

    public async void RemoverDetalle(ComboDetalles detalle)
    {
        Combo.CombosDetalle.Remove(detalle);
        CalcularMontoTotal();
        NuevoDetalle.ProductosId = detalle.ProductosId;
        NuevoDetalle.Cantidad = detalle.Cantidad;
        NuevoDetalle.Costo = detalle.Costo;

        var articulo = await productosService.Buscar(detalle.ProductosId);
        if (articulo != null)
        {
            articulo.Existencia += detalle.Cantidad;
        }
    }

    public void LimpiarMensajes()
    {
        DetalleMensaje = string.Empty;
    }
}
